{"version":3,"sources":["reducer/store.tsx","components/Notifications/Notifications.tsx","components/Loader/Loader.tsx","components/UserData/DropdownList.tsx","components/UserData/UserSelector.tsx","components/PostData/PostInfo.tsx","components/PostData/PostsList.tsx","utils/fetchClient.ts","services/comment.service.ts","api/users.api.ts","components/Comment/NewCommentForm.tsx","components/Comment/CommentsList.tsx","services/post.service.ts","components/PostData/PostDetails.tsx","components/Sidebar/Sidebar.tsx","services/user.service.ts","App.tsx","index.tsx"],"names":["ActionTypes","NotificationTypes","reducer","state","action","type","selectUser","selectedUser","user","getAllUsers","usersList","users","selectPost","selectedPost","post","getAllPosts","postsList","posts","getComments","commentsList","comments","setNotification","notificationType","notificationMessage","notificationData","initialState","StateContext","React","createContext","DispatchContext","GlobalStateProvider","children","useReducer","dispatch","Provider","value","Notifications","useContext","className","classNames","Loader","DropdownList","memo","list","chosenElem","handler","map","elem","href","id","onClick","name","UserSelector","useState","showDropdown","setShowDropdown","dropdownRef","useRef","closeDropdown","useCallback","handleClickOutside","event","current","contains","target","selectUserHandler","onShowDropdownHandler","oldShowState","useEffect","document","addEventListener","removeEventListener","ref","role","PostInfo","isPostChosen","onClickHandler","title","PostsList","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","commentService","addNewComment","dataToSend","setShowSpinner","resetField","res","finally","removeComment","setComments","filter","c","length","deleteComment","catch","Error","NewCommentForm","postId","showSpinner","useForm","register","errors","formState","reset","handleSubmit","onClearFormHandler","onSubmit","trim","email","htmlFor","required","placeholder","CommentsList","onDeleteButton","comment","postService","setPosts","setShowNotification","Array","isArray","warning","danger","setPostComments","PostDetails","isError","setIsError","showCommentForm","setShowCommentForm","onShowFormHandler","showNoComment","showCommentsList","showWriteBtn","Sidebar","userService","getUsers","App","showNotification","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cfbeceb6.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport enum ActionTypes {\n  selectUser,\n  getAllUsers,\n  selectPost,\n  getAllPosts,\n  getComments,\n  setNotification,\n}\n\nexport enum NotificationTypes {\n  danger = 'is-danger',\n  warning = 'is-warning',\n}\n\nexport type Action = { type: ActionTypes.selectUser, user: User | null } |\n{ type: ActionTypes.getAllUsers, users: User[] | null } |\n{ type: ActionTypes.selectPost, post: Post | null } |\n{ type: ActionTypes.getAllPosts, posts: Post[] | null } |\n{ type: ActionTypes.getComments, comments: Comment[] | null } |\n{\n  type: ActionTypes.setNotification,\n  notificationType: NotificationTypes.danger | NotificationTypes.warning | null\n  notificationMessage: string\n  notificationData: string\n};\n\ntype State = {\n  selectedUser: User | null\n  usersList: User[] | null\n  selectedPost: Post | null\n  postsList: Post[] | null\n  commentsList: Comment[] | null\n  notificationType: NotificationTypes.danger | NotificationTypes.warning | null\n  notificationMessage: string\n  notificationData: string\n};\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionTypes.selectUser:\n      return {\n        ...state,\n        selectedUser: action.user,\n      };\n\n    case ActionTypes.getAllUsers:\n      return {\n        ...state,\n        usersList: action.users,\n      };\n\n    case ActionTypes.selectPost:\n      return {\n        ...state,\n        selectedPost: action.post,\n      };\n\n    case ActionTypes.getAllPosts:\n      return {\n        ...state,\n        postsList: action.posts,\n      };\n\n    case ActionTypes.getComments:\n      return {\n        ...state,\n        commentsList: action.comments,\n      };\n\n    case ActionTypes.setNotification:\n      return {\n        ...state,\n        notificationType: action.notificationType,\n        notificationMessage: action.notificationMessage,\n        notificationData: action.notificationData,\n\n      };\n    default:\n      return state;\n  }\n}\n\nconst initialState: State = {\n  selectedUser: null,\n  usersList: null,\n  selectedPost: null,\n  postsList: null,\n  commentsList: null,\n  notificationType: null,\n  notificationMessage: '',\n  notificationData: '',\n};\n\nexport const StateContext = React.createContext(initialState);\nexport const DispatchContext = React.createContext<(action: Action) => void>(\n  () => {});\n\ntype Props = {\n  children: React.ReactNode\n};\n\nexport const GlobalStateProvider: React.FC<Props> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        {children}\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { StateContext } from '../../reducer/store';\n\nexport const Notifications: React.FC = () => {\n  const {\n    notificationMessage,\n    notificationType,\n    notificationData,\n  } = useContext(StateContext);\n\n  return (\n    <div\n      className={classNames(`notification ${notificationType}`)}\n      data-cy={notificationData}\n    >\n      {notificationMessage}\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props<T> = {\n  list: T[] | null\n  chosenElem: T | null\n  handler: (elem: (T | null)) => () => void\n};\n\nconst DropdownList:React.FC<Props<User>> = React.memo((\n  {\n    list,\n    chosenElem,\n    handler,\n  },\n) => {\n  return (\n    <div className=\"dropdown-content\">\n      {list\n        && list.map(elem => (\n          <a\n            key={elem.id}\n            href={`#user-${elem.id}`}\n            className={classNames(\n              'dropdown-item',\n              { 'is-active': chosenElem?.id === elem.id },\n            )}\n            onClick={handler(elem)}\n          >\n            {elem.name}\n          </a>\n        ))}\n\n      {!list && <Loader />}\n    </div>\n  );\n});\n\nexport { DropdownList };\n","import React, {\n  useCallback, useContext, useEffect, useRef, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { DropdownList } from './DropdownList';\nimport {\n  ActionTypes,\n  DispatchContext,\n  StateContext,\n} from '../../reducer/store';\nimport { User } from '../../types/User';\n\ntype Props = {\n};\n\nexport const UserSelector: React.FC<Props> = () => {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const { selectedUser, usersList } = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  const closeDropdown = useCallback(() => {\n    setShowDropdown(false);\n  }, []);\n\n  const handleClickOutside = useCallback((event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      closeDropdown();\n    }\n  }, []);\n\n  const selectUserHandler = useCallback(\n    (user: User | null) => () => {\n      dispatch({ type: ActionTypes.selectUser, user });\n      closeDropdown();\n    }, [],\n  );\n\n  const onShowDropdownHandler = useCallback(() => {\n    setShowDropdown(oldShowState => !oldShowState);\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': showDropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          onClick={onShowDropdownHandler}\n          aria-controls=\"dropdown-menu\"\n        >\n          {selectedUser\n            ? <span>{selectedUser.name}</span>\n            : <span>Choose a user</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <DropdownList\n          list={usersList}\n          chosenElem={selectedUser}\n          handler={selectUserHandler}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\nimport {\n  ActionTypes,\n  DispatchContext,\n  StateContext,\n} from '../../reducer/store';\n\ntype Props = {\n  post: Post\n};\n\nexport const PostInfo: React.FC<Props> = ({ post }) => {\n  const dispatch = useContext(DispatchContext);\n  const { selectedPost } = useContext(StateContext);\n  const isPostChosen = selectedPost?.id === post.id;\n\n  const onClickHandler = useCallback(() => {\n    if (isPostChosen) {\n      dispatch({ type: ActionTypes.selectPost, post: null });\n\n      return;\n    }\n\n    dispatch({ type: ActionTypes.selectPost, post });\n  }, [post, isPostChosen]);\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': !isPostChosen },\n          )}\n          onClick={onClickHandler}\n        >\n          {isPostChosen ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../../types/Post';\nimport { PostInfo } from './PostInfo';\n\ntype Props = {\n  postsList: Post[]\n};\n\nexport const PostsList: React.FC<Props> = ({ postsList }) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {postsList.map((post) => <PostInfo key={post.id} post={post} />)}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport { UseFormResetField } from 'react-hook-form';\nimport { Action, ActionTypes } from '../reducer/store';\nimport { addComment, deleteComment } from '../api/users.api';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport function commentService(\n  dispatch: (action: Action) => void,\n  commentsList: Comment[] | null,\n) {\n  function addNewComment(\n    dataToSend: CommentData & { postId: number },\n    setShowSpinner: React.Dispatch<React.SetStateAction<boolean>>,\n    resetField: UseFormResetField<CommentData>,\n  ) {\n    addComment(dataToSend)\n      .then((res) => {\n        dispatch({\n          type: ActionTypes.getComments,\n          comments: commentsList ? [...commentsList, res] : [res],\n        });\n\n        resetField('body');\n      })\n      .finally(() => {\n        setShowSpinner(false);\n      });\n  }\n\n  function removeComment(id: number) {\n    const setComments = commentsList\n      ? commentsList.filter(c => c.id !== id)\n      : null;\n\n    dispatch({\n      type: ActionTypes.getComments,\n      comments: setComments?.length ? setComments : null,\n    });\n\n    deleteComment(id)\n      .catch(() => {\n        throw Error();\n      });\n  }\n\n  return { addNewComment, removeComment };\n}\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPost = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getPostComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (data: CommentData & { postId: number }) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, { useCallback, useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { CommentData } from '../../types/Comment';\nimport {\n  DispatchContext,\n  StateContext,\n} from '../../reducer/store';\nimport { commentService } from '../../services/comment.service';\n\ntype Props = {\n  postId: number\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({ postId }) => {\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  const { commentsList } = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const {\n    register,\n    formState: { errors },\n    reset,\n    resetField,\n    handleSubmit,\n  } = useForm<CommentData>();\n\n  const onSubmit = (data: CommentData) => {\n    const { addNewComment } = commentService(dispatch, commentsList);\n\n    setShowSpinner(true);\n\n    const dataToSend = {\n      name: data.name.trim(),\n      email: data.email.trim(),\n      body: data.body.trim(),\n      postId,\n    };\n\n    addNewComment(dataToSend, setShowSpinner, resetField);\n  };\n\n  const onClearFormHandler = useCallback(() => reset(), []);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            {...register('name', { required: true })}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            {...register('email', { required: true })}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            {...register('body', { required: true })}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={\n              classNames(\n                'button is-link',\n                { 'is-loading': showSpinner },\n              )\n            }\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            onClick={onClearFormHandler}\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import React, { useCallback, useContext } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { DispatchContext } from '../../reducer/store';\nimport { commentService } from '../../services/comment.service';\n\ntype Props = {\n  comments: Comment[]\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments }) => {\n  const dispatch = useContext(DispatchContext);\n\n  const onDeleteButton = useCallback((id: number) => () => {\n    const { removeComment } = commentService(dispatch, comments);\n\n    removeComment(id);\n  }, [comments]);\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => {\n        return (\n          <article\n            key={comment.id}\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n          >\n            <div className=\"message-header\">\n              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                {comment.name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={onDeleteButton(comment.id)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {comment.body}\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n};\n","import React from 'react';\nimport { Action, ActionTypes, NotificationTypes } from '../reducer/store';\nimport { getPostComments, getUserPost } from '../api/users.api';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\nexport function postService(\n  dispatch: (action: Action) => void,\n) {\n  function setPosts(\n    setShowNotification: React.Dispatch<React.SetStateAction<boolean>>,\n    selectedUser: User | null,\n    setShowSpinner: React.Dispatch<React.SetStateAction<boolean>>,\n  ) {\n    setShowNotification(false);\n\n    dispatch(\n      { type: ActionTypes.selectPost, post: null },\n    );\n\n    if (selectedUser) {\n      setShowSpinner(true);\n\n      dispatch(\n        { type: ActionTypes.getAllPosts, posts: null },\n      );\n\n      getUserPost(selectedUser.id)\n        .then(posts => {\n          if (!Array.isArray(posts)) {\n            throw Error();\n          }\n\n          if (posts.length === 0) {\n            setShowNotification(true);\n\n            dispatch({\n              type: ActionTypes.setNotification,\n              notificationType: NotificationTypes.warning,\n              notificationMessage: 'No posts yet',\n              notificationData: 'NoPostsYet',\n            });\n\n            dispatch(\n              { type: ActionTypes.getAllPosts, posts: null },\n            );\n\n            return;\n          }\n\n          dispatch(\n            { type: ActionTypes.getAllPosts, posts },\n          );\n        })\n        .catch(() => {\n          dispatch(\n            { type: ActionTypes.getAllPosts, posts: null },\n          );\n\n          dispatch({\n            type: ActionTypes.setNotification,\n            notificationType: NotificationTypes.danger,\n            notificationMessage: 'Something went wrong!',\n            notificationData: 'PostsLoadingError',\n          });\n\n          setShowNotification(true);\n        })\n        .finally(() => {\n          setShowSpinner(false);\n        });\n    }\n  }\n\n  function setPostComments(\n    selectedPost: Post | null,\n    setShowSpinner: React.Dispatch<React.SetStateAction<boolean>>,\n    setShowNotification: React.Dispatch<React.SetStateAction<boolean>>,\n  ) {\n    if (selectedPost) {\n      setShowSpinner(true);\n\n      getPostComments(selectedPost.id)\n        .then(comments => {\n          if (!Array.isArray(comments)) {\n            throw Error();\n          }\n\n          if (comments.length) {\n            dispatch({ type: ActionTypes.getComments, comments });\n          } else {\n            dispatch({ type: ActionTypes.getComments, comments: null });\n          }\n        })\n        .catch(() => {\n          setShowNotification(true);\n\n          dispatch({\n            type: ActionTypes.setNotification,\n            notificationType: NotificationTypes.danger,\n            notificationMessage: 'Something went wrong!',\n            notificationData: 'CommentsError',\n          });\n        })\n        .finally(() => {\n          setShowSpinner(false);\n        });\n    }\n  }\n\n  return { setPosts, setPostComments };\n}\n","import React, {\n  useCallback, useContext, useEffect, useState,\n} from 'react';\nimport { NewCommentForm } from '../Comment/NewCommentForm';\nimport { DispatchContext, StateContext } from '../../reducer/store';\nimport { Loader } from '../Loader';\nimport { CommentsList } from '../Comment/CommentsList';\nimport { postService } from '../../services/post.service';\nimport { Notifications } from '../Notifications/Notifications';\n\nexport const PostDetails: React.FC = () => {\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [showCommentForm, setShowCommentForm] = useState(false);\n\n  const { selectedPost, commentsList } = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const onShowFormHandler = useCallback(() => {\n    setShowCommentForm(true);\n  }, []);\n\n  const showNoComment = !isError && !commentsList && !showSpinner;\n  const showCommentsList = commentsList?.length && !showSpinner;\n  const showWriteBtn = !showCommentForm && !showSpinner && !isError;\n\n  useEffect(() => {\n    const { setPostComments } = postService(dispatch);\n\n    setPostComments(\n      selectedPost,\n      setShowSpinner,\n      setIsError,\n    );\n\n    return () => {\n      setIsError(false);\n      setShowCommentForm(false);\n    };\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost ? `#${selectedPost.id}: ${selectedPost.title}` : ''}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n\n          {showNoComment && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isError && <Notifications />}\n        </div>\n\n        <div className=\"block\">\n          {showSpinner && <Loader />}\n\n          { showCommentsList && <CommentsList comments={commentsList} /> }\n\n          {showWriteBtn && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={onShowFormHandler}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {showCommentForm && selectedPost\n          && <NewCommentForm postId={selectedPost.id} />}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useContext } from 'react';\nimport { PostDetails } from '../PostData/PostDetails';\nimport { StateContext } from '../../reducer/store';\n\nexport const Sidebar = () => {\n  const { selectedPost } = useContext(StateContext);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        {\n          'Sidebar--open': selectedPost,\n        },\n      )}\n    >\n      {selectedPost && (\n        <div className=\"tile is-child box is-success \">\n          <PostDetails />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { getAllUsers } from '../api/users.api';\nimport { Action, ActionTypes, NotificationTypes } from '../reducer/store';\n\nexport function userService(\n  dispatch: (action: Action) => void,\n) {\n  function getUsers(\n    setShowNotification: React.Dispatch<React.SetStateAction<boolean>>,\n  ) {\n    getAllUsers()\n      .then(users => {\n        if (!Array.isArray(users)) {\n          throw Error();\n        }\n\n        dispatch(\n          { type: ActionTypes.getAllUsers, users },\n        );\n      })\n      .catch(() => {\n        dispatch({\n          type: ActionTypes.setNotification,\n          notificationType: NotificationTypes.danger,\n          notificationMessage: 'Something went wrong!',\n          notificationData: 'PostsLoadingError',\n        });\n\n        setShowNotification(true);\n      });\n  }\n\n  return { getUsers };\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { DispatchContext, StateContext } from './reducer/store';\nimport { Notifications } from './components/Notifications/Notifications';\nimport { UserSelector } from './components/UserData/UserSelector';\nimport { PostsList } from './components/PostData/PostsList';\nimport { Loader } from './components/Loader';\nimport { Sidebar } from './components/Sidebar/Sidebar';\nimport { userService } from './services/user.service';\nimport { postService } from './services/post.service';\n\nexport const App: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [showNotification, setShowNotification] = useState(false);\n  const { selectedUser, postsList } = useContext(StateContext);\n\n  useEffect(() => {\n    const { getUsers } = userService(dispatch);\n\n    getUsers(setShowNotification);\n  }, []);\n\n  useEffect(() => {\n    const { setPosts } = postService(dispatch);\n\n    setPosts(setShowNotification, selectedUser, setShowSpinner);\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {showNotification && <Notifications />}\n\n                {showSpinner && <Loader />}\n\n                {postsList && <PostsList postsList={postsList} />}\n              </div>\n            </div>\n          </div>\n\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { GlobalStateProvider } from './reducer/store';\n\nReactDOM.render(\n  <GlobalStateProvider>\n    <App />\n  </GlobalStateProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}